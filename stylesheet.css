/*  # FONTS  */

@font-face {

    font-family: 'Inter';
    
    src: local('Inter'),
		 local('Inter Regular'), local('Inter-Regular'),
         url('fonts/Inter/subset-Inter-Regular.woff2') format('woff2'),
         url('fonts/Inter/subset-Inter-Regular.woff') format('woff');
         
    font-weight: normal;
    font-style: normal;
    
}


/*  # VARIABLES  */

:root {

	/*  Colors  */
	
	--theme:        hsl(  0,   0%, 87%);
	--solved:       hsl(127,  63%, 49%);

	--timer:        hsl(  3,  63%, 36%);
	--countdown:    hsl(  3, 100%, 61%);

	--background:   hsl(  0,   0%, 20%);


	/*  Sizing  */

	--padding:        2.5% 5%;
	--cell-size:      2.5em;

}


/*  # BASICS  */

body {

	font-family: "Inter", "Helvetica Now", "Helvetica Neue", "Helvetica", sans-serif;
	color: white;

	-webkit-user-select: none;
	-ms-user-select:     none;
	user-select:         none;

}

.hidden { display: none; }


/*  # LAYOUT  */

article,
article main,
article header,
article footer {

	display:     flex;
	align-items: center;

}

article,
article header { flex-direction: column; }

article {

	justify-content: space-between;

	position: absolute;
	top:      0;
	bottom:   0;
	left:     0;
	right:    0;

	padding: var(--padding);

	background-color: var(--background);

}

article main {
	
	justify-content: space-between;
	flex-basis:      75%;

}

article main .shader {

	--shade: white;

	position: absolute;
	top: 0;
	bottom: 0;
	left: 0;
	right: 0;

	box-shadow: inset 0 0 5em var(--shade);

	transition: 0.175s opacity;

	opacity: 0;
	pointer-events: none;

}

article header,
article footer { flex-basis: 12.5%; }

article header {
	
	justify-content: center;
	align-self:      normal;

}

article header * + * { margin-block-start: 1em; }

article footer {

	font-size:   1.25em;

	transition:  0.33s all;

}


/*  # LAYOUT :: Cell  */

kbd {

	display:         flex;
	justify-content: center;
	align-items:     center;

	position: relative;

	min-width:  var(--cell-size);
	min-height: var(--cell-size);

	margin:  0 0.5em;
	padding: 0 0.5em;

	border: 3px solid currentColor;
	border-radius: 0.175em;

	font-family:    monospace;
	font-size:      var(--cell-size);
	line-height:    1;
	text-transform: uppercase;
	color:          var(--theme);

	transition: transform 0.1s, opacity 0.175s;

	box-sizing: border-box;

}

kbd::before {

	content: "";

	position: absolute;
	top:      0;
	left:     0;
	right:    0;
	bottom:   0;

	background-color: currentColor;

	box-shadow: 0 0 8px;

	opacity: 0.2;

}

kbd span { transition: opacity 0.175s; }

kbd.solved  { color: var(--solved); }

kbd.pressed { transform: scale(0.975); }

kbd.hotkey {

	min-height: calc(var(--cell-size) * 0.83);

	font-size:  calc(var(--cell-size) * 0.58);

}


/*  # SCREENS  */

/*  # SCREENS :: Start  */

.start { z-index: 100; }

.start main { position: relative; }

.start .title {

	font-family:  monospace;
	font-size:    10em;
	text-indent: -0.1ch;

}

.start .tagline {

	position: absolute;
	top: 1em;

}

/*  # SCREENS :: Playfield  */

.playfield header { margin-block-start: -1.5em; }

.playfield header .timer {

	width:  100%;
	height: 1.125vh;

	border-radius: 0.125em;

	background-color: var(--timer);

	overflow: hidden;

}

.playfield header .timer .countdown {

	width:  100%;
	height: 100%;

	background-color: var(--countdown);

}

.playfield.failed main kbd:not(.solved) { color: var(--countdown); }

.playfield footer {

	opacity: 0;
	pointer-events: none;

}

.playfield.failed footer {
	
	opacity: 1;
	pointer-events: initial;

}

.playfield main kbd { z-index: 11; }

.playfield main .score {

	--shift: -0.05em;

	position: absolute;
	top:      50%;
	left:     50%;

	margin-block-start: -0.075ex;

	font-size:      22em;
	letter-spacing: var(--shift);
	/* * without `text-indent` of the same value, `letter-spacing` doesn't change score's box size */
	/* * without changing its box size, score doesn't aling properly after digit shift */
	text-indent:    var(--shift);

	transform: translate(-50%, -50%);

	opacity: 0;

	transition: opacity 0.5s;

	z-index: 10;

}

.playfield main .score.visible { opacity: 0.075; }

.playfield main .shader { --shade: var(--countdown); }

.playfield.foul main .shader { opacity: 1; }

.playfield.paused main kbd            { opacity: 0.5;  }
.playfield.paused main kbd span       { opacity: 0;    }
.playfield.paused main .score.visible { opacity: 0.5;  }
.playfield.paused header .timer       { opacity: 0.5;  }
